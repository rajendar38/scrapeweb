Perfect â€” if you donâ€™t need a template engine, that simplifies the design. Your focus is just to extract configurable fields from raw Kubernetes manifests and generate a values.yaml file from them, without converting the original manifests into Helm templates.

â¸»

âœ… Revised High-Level Design (No Template Engine)

Goal: From raw Kubernetes manifests (Deployment, Service, etc.), generate a values.yaml file capturing user-configurable fields.

â¸»

1. Input
	â€¢	One or more YAML manifest files (Deployment, Service, ConfigMap, VirtualService, etc.)

â¸»

2. Output
	â€¢	A single values.yaml file with all parameter-like values extracted

â¸»

3. Architecture Components

ðŸ”¹ A. Manifest Collector
	â€¢	Load multiple .yaml or .yml files from a folder or CLI argument
	â€¢	Support:
	â€¢	Single documents
	â€¢	Multi-document YAML (â€” separated)

ðŸ”¹ B. Field Extractor
	â€¢	For each resource kind, extract specific fields:
	â€¢	Deployment:
	â€¢	.spec.replicas
	â€¢	.spec.template.spec.containers[].image
	â€¢	.spec.template.spec.containers[].resources
	â€¢	Service:
	â€¢	.spec.type, .spec.ports
	â€¢	ConfigMap:
	â€¢	.data key-values
	â€¢	VirtualService:
	â€¢	.spec.hosts, .spec.http[].route[].destination.host
	â€¢	Allow user to configure fields to extract via a fields.yaml config if needed later

ðŸ”¹ C. Values Builder
	â€¢	For each extracted field, create a corresponding entry in values.yaml
	â€¢	Use logical structure:

deployment:
  replicaCount: 3
  image:
    repository: nginx
    tag: 1.21
config:
  APP_ENV: "dev"
  DB_HOST: "db.example.com"



ðŸ”¹ D. Output Writer
	â€¢	Writes final values.yaml
	â€¢	Optional: Split values by kind (e.g., deployment-values.yaml, service-values.yaml) or keep unified

â¸»

4. Sample Input & Output

ðŸ”¸ Input: deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  replicas: 2
  template:
    spec:
      containers:
        - name: app
          image: myapp:v1.0.0
          resources:
            limits:
              cpu: "500m"
              memory: "256Mi"

ðŸ”¸ Output: values.yaml

deployment:
  replicaCount: 2
  image:
    name: myapp
    tag: v1.0.0
  resources:
    limits:
      cpu: "500m"
      memory: "256Mi"


â¸»

5. Optional Features

Feature	Description
--input-dir / --input-file	Accepts path to manifests
--include-kinds	Filter to extract only Deployments, etc.
--flatten	Flattens keys in values.yaml
--json-output	Also generate values.json


â¸»

6. Implementation Suggestion

âœ” Python with ruamel.yaml
	â€¢	Maintains order + comments in YAML
	â€¢	Easy parsing and writing

â¸»

âœ… Summary

Step	Action
1	Load manifest(s)
2	Identify known K8s object kinds
3	Extract specific fields (image, replicas, config, etc.)
4	Build structured values.yaml
5	Write output YAML file


â¸»

Would you like:
	â€¢	A working Python starter script?
	â€¢	Or a CLI tool design spec for this functionality?